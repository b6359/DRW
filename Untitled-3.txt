
function initializeProductMaster() {
  const modal = document.getElementById("productModal");
  const openBtn = document.getElementById("openProductModalBtn");
  const closeBtn = modal?.querySelector(".closeProductModalBtn");
  const form = document.getElementById("productForm");
  const tableBody = document.querySelector("#productTable tbody");
  const searchInput = document.getElementById("productSearchInput");

  let allProducts = [];
  let allItems = [];

  openBtn.addEventListener("click", () => {
    form.reset();
    delete form.dataset.editingId;
    document.getElementById("itemFieldsContainer").innerHTML = "";

    // Load items first, then add initial item row
    loadItemOptions(() => {
      addItemRow();
    });

    modal.style.display = "block";
  });


  closeBtn.addEventListener("click", () => modal.style.display = "none");
  window.addEventListener("click", e => { if (e.target === modal) modal.style.display = "none"; });

  form.addEventListener("submit", function (e) {
    e.preventDefault();
    const data = Object.fromEntries(new FormData(form).entries());
    const itemMasterIds = [];
    const itemFields = document.querySelectorAll(".itemSelection-row");
    itemFields.forEach(row => {
      const select = row.querySelector("select");
      if (select && select.value) {
        itemMasterIds.push(parseInt(select.value));
      }
    });

    const payload = {
      productName: data.itemName || "",
      modelNo: data.modelNo || "",
      rate: parseFloat(data.rate) || 0,
      pendingForBelt: data.pendingForBelt || "no",
      itemMasterIds: itemMasterIds, // ✅ correct value used
      qty: data.qty ? parseInt(data.qty) : 1,
      createdBy: data.createdBy ? parseInt(data.createdBy) : 1
    };

    if (form.dataset.editingId) payload.id = parseInt(form.dataset.editingId);

    console.log("Payload being sent to API:", payload); // ✅ log here

    const url = form.dataset.editingId
      ? "http://127.0.0.1/DRW/api/products/update.php"
      : "http://127.0.0.1/DRW/api/products/add.php";

    fetch(url, {
      method: form.dataset.editingId ? "PUT" : "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    })
      .then(res => res.json())
      .then(res => {
        if (res.status === 200) {
          alert(form.dataset.editingId ? "Product updated!" : "Product added!");
          modal.style.display = "none";
          fetchProducts();
        } else {
          alert("Operation failed: " + res.message);
        }
      });
  });


  function fetchProducts() {
    fetch("http://127.0.0.1/DRW/api/products/all.php")
      .then(res => res.json())
      .then(res => {
        allProducts = res.data || [];
        displayProducts(allProducts);
      });
  }

  function displayProducts(products) {
    tableBody.innerHTML = products.length
      ? products.map((product, index) => `
               <tr data-id="${product.id}">
                 <td>${index + 1}</td> <!-- Sequential numbering -->
                 <td>${product.productName}</td>
                 <td>${product.modelNo}</td>
                 <td>${product.rate}</td>
                 <td>${product.pendingForBelt === 'yes' ? 'Yes' : 'No'}</td>
                 <td>${(product.createdAt || '').split(' ')[0]}</td>
                 <td>
                   <button class="editBtn" title="Edit"><i class="fas fa-edit"></i></button>
                   <button class="deleteBtn" title="Delete"><i class="fas fa-trash-alt"></i></button>
                 </td>
               </tr>`).join('')
      : `<tr><td colspan="8">No products found</td></tr>`;
  }


  function loadItemOptions(callback) {
    fetch("http://127.0.0.1/DRW/api/items/all.php")
      .then(res => res.json())
      .then(res => {
        allItems = res.data || [];
        if (typeof callback === "function") callback(); // now call addItemRow
      });
  }


  function addItemRow() {
    const container = document.getElementById("itemFieldsContainer");
    const row = document.createElement("div");
    row.className = "itemSelection-row";
    row.style = "display: flex; align-items: center; gap: 10px; margin-bottom: 10px; width: 100%;";

    const selectId = `select_${Date.now()}`; // unique ID for Choices
    row.innerHTML = `
        <div class="itemRow" style="display: flex; width: 100%; gap: 10px; align-items: center; justify-content: center;">
            <div class="selectContainer" style="flex: 7;">
            <select id="${selectId}" class="itemSelect" style="width:100%; padding:6px; border-radius:20px;" required>
                <option value="">Select an item...</option>
                ${allItems.map(item => `<option value="${item.id}">${item.itemName}</option>`).join('')}
            </select>
            </div>
            
            <div class="qtyContainer" style="flex: 2;">
            <input type="number" class="itemQtyInput" placeholder="Qty" min="1"
                style="width: 100%; padding: 6px; border-radius: 20px;" required/>
            </div>

            <div class="removeContainer" style="flex: 1; display: flex; align-items: center; justify-content: center;">
            <span class="removeBtn" title="Remove" style="cursor: pointer; font-size: 20px; color: red;">
                <i class="fas fa-trash-alt"></i>
            </span>
            </div>
        </div>
    `;

    container.appendChild(row);
    const selectElement = row.querySelector(`#${selectId}`);

    // Initialize Choices.js with search enabled
    new Choices(selectElement, {
      searchEnabled: true,
      itemSelectText: '',
      placeholderValue: 'Search and select an item...',
      shouldSort: false,
    });

    initializeItemRow(row);
  }


  function initializeItemRow(row) {
    const select = row.querySelector(".itemSelect");

    select.addEventListener("change", function () {
      // Handle item selection logic here if needed
      console.log("Item Selected: ", select.value);
    });
  }

  document.addEventListener("click", e => {
    // Handle Add More button
    if (e.target.classList.contains("addMoreBtn")) {
      const container = document.getElementById("itemFieldsContainer");
      const itemRows = container.querySelectorAll(".itemSelection-row");

      if (itemRows.length > 0) {
        const lastRow = itemRows[itemRows.length - 1];
        const select = lastRow.querySelector("select");
        const qtyInput = lastRow.querySelector(".itemQtyInput");

        if (!select.value || !qtyInput.value || parseInt(qtyInput.value) <= 0) {
          alert("Please select an item and enter a valid quantity before adding more.");
          return; // ⛔ Prevent adding a new row
        }
      }

      addItemRow(); // ✅ Add new row only if previous one is valid
    }

    // Handle Remove button
    if (e.target.closest(".removeBtn")) {
      const row = e.target.closest(".itemSelection-row");
      if (row) row.remove(); // Remove the row containing the delete button
    }
  });

  tableBody.addEventListener("click", function (e) {
    const row = e.target.closest("tr");
    const id = row?.dataset.id;
    if (!id) return;

    if (e.target.classList.contains("editBtn")) {
      const cells = row.querySelectorAll("td");
      form.itemName.value = cells[1].innerText;
      form.modelNo.value = cells[2].innerText;
      // form.qty.value = cells[3].innerText;
      form.rate.value = cells[3].innerText;
      form.pendingForBelt.value = cells[4].innerText === 'Yes' ? 'yes' : 'no';
      // form.createdBy.value = "1";
      form.dataset.editingId = id;
      modal.style.display = "block";
    }

    if (e.target.classList.contains("deleteBtn") && confirm("Are you sure?")) {
      fetch("http://127.0.0.1/DRW/api/products/delete.php", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id: parseInt(id) })
      })
        .then(res => res.json())
        .then(res => {
          if (res.status === 200) {
            alert("Deleted!");
            fetchProducts();
          } else {
            alert("Delete failed: " + res.message);
          }
        });
    }
  });

  searchInput.addEventListener("input", function () {
    const query = this.value.toLowerCase();
    const filtered = allProducts.filter(product =>
      product.productName.toLowerCase().includes(query) ||
      product.modelNo.toLowerCase().includes(query)
    );
    displayProducts(filtered);
  });

  fetchProducts();
}